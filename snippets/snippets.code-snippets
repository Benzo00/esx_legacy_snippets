{
    "RegisterCommand": {
        "prefix": "ESX.RegisterCommand",
        "body": [
            "ESX.RegisterCommand({'clear', 'cls'}, 'user', function(xPlayer, args, showError)",
            "    xPlayer.triggerEvent('chat:clear')",
            "end, false, {help = _U('command_clear')})",
        ]
    },
    "PlayerLoaded": {
        "prefix": "ESX:playerloaded",
        "body": [
            "RegisterNetEvent('esx:playerLoaded')",
            "AddEventHandler('esx:playerLoaded', function(playerData)",
                "$0",
            "end)"
        ]
    },
    "AdvancedNotification": {
        "prefix": "ESX:showAdvancedNotification event",
        "body": [
            "TriggerClientEvent('esx:showAdvancedNotification', source, title, subject, msg, icon, iconType)"
        ]
    },
    "showHelpNotification": {
        "prefix": "ESX:showHelpNotification event",
        "body": [
            "TriggerClientEvent('esx:showHelpNotification', source, 'Hit ~INPUT_CONTEXT~ to do shit!')"
        ]
    },
    "showNotification": {
        "prefix": "ESX:showNotification event",
        "body": [
            "TriggerClientEvent('esx:showNotification', source, 'Hello world!', type, time) -- all types can be find in the documentation: https://docs.esx-framework.org/legacy/Client/events/shownotification"
        ]
    },
    "GetPlayerData": {
        "prefix": "ESX.GetPlayerData",
        "body": [
            "ESX.GetPlayerData()"
        ]
    },
    "IsPlayerLoaded": {
        "prefix": "ESX.IsPlayerLoaded",
        "body": [
            "ESX.IsPlayerLoaded()"
        ]
    },
    "SetPlayerData": {
        "prefix": "ESX.SetPlayerData",
        "body": [
            "ESX.SetPlayerData(key, val)"
        ]
    },
    "AdvancedNotification2": {
        "prefix": "ESX:showAdvancedNotification function",
        "body": [
            "ESX.ShowAdvancedNotification(sender, subject, msg, textureDict, iconType, flash, saveToBrief, hudColorIndex) -- all info can be found in the documentation: https://docs.esx-framework.org/legacy/Client/functions/showadvancednotification"
        ]
    },
    "ShowFloatingHelpNotification": {
        "prefix": "ESX.ShowFloatingHelpNotification",
        "body": [
            "local coords = GetEntityCoords(PlayerPedId())",
            "ESX.ShowFloatingHelpNotification('Your Notification', vector3(coords.x, coords.y, coords.z))"
        ]
    },
    "ShowHelpNotification2": {
        "prefix": "ESX:showHelpNotification function",
        "body": [
            "ESX.ShowHelpNotification('Hit ~INPUT_CONTEXT~ to do shit!')"
        ]
    },
    "ShowInventory": {
        "prefix": "ESX.ShowInventory",
        "body": [
            "ESX.ShowInventory()"
        ]
    },
    "ShowNotification2": {
        "prefix": "ESX.ShowNotification",
        "body": [
            "ESX.ShowNotification(msg, time, type) -- all information can be found in the documentation: https://docs.esx-framework.org/legacy/Client/functions/shownotification"
        ]
    },
    "TriggerServerCallback": {
        "prefix": "ESX.TriggerServerCallback",
        "body": [
            "local data2 = 'data'",
            "ESX.TriggerServerCallback('esx:bestframework', function(data)",
            "   print(data)",
            "end, data2)"
        ]
    },
    "DeleteObj": {
        "prefix": "ESX.Game.DeleteObject",
        "body": [
            "ESX.Game.DeleteObject(obj"
        ]
    },
    "DeleteVehicle": {
        "prefix": "ESX.Game.DeleteVehicle",
        "body": [
            "ESX.Game.DeleteVehicle(veh)"
        ]
    },
    "GetClosestEntity": {
        "prefix": "ESX.Game.GetClosestEntity",
        "body": [
            "ESX.Game.GetClosestEntity(pos, filter)"
        ]
    },
    "GetClosestObject": {
        "prefix": "ESX.Game.GetClosestObject",
        "body": [
            "ESX.Game.GetClosestObject(pos, filter)"
        ]
    },
    "GetClosestPed": {
        "prefix": "ESX.Game.GetClosestPed", 
        "body": [
            "ESX.Game.GetClosestPed(pos, filter)"
        ]
    },
    "GetClosestPlayer": {
        "prefix": "ESX.Game.GetClosestPlayer",
        "body": [
            "ESX.Game.GetClosestPlayer(pos)"
        ]
    },
    "GetClosestVehicle": {
        "prefix": "ESX.Game.GetClosestVehicle",
        "body": [
            "ESX.Game.GetClosestVehicle(pos, filter)"
        ]
    },
    "GetObjects": {
        "prefix": "ESX.Game.GetObjects",
        "body": [
            "ESX.Game.GetObjects"
        ]
    },
    "GetPedMugShot": {
        "prefix": "ESX.Game.GetPedMugShot",
        "body": [
            "local shot, shotStr = ESX.Game.GetPedMugShot(ped)"
        ]
    },
    "GetPeds": {
        "prefix": "ESX.Game.GetPeds",
        "body": [
            "ESX.Game.GetPeds(peds)"
        ]
    },
    "GetPlayers": {
        "prefix": "ESX.Game.GetPlayers",
        "body": [
            "ESX.Game.GetPlayers(players, value, peds)"
        ]
    },
    "GetPlayersInArea": {
        "prefix": "ESX.Game.GetPlayersInArea",
        "body": [
            "ESX.Game.GetPlayersInArea(pos, dist)"
        ]
    },
    "GetVehicleDirection": {
        "prefix": "ESX.Game.GetVehicleDirection",
        "body": [
            "ESX.Game.GetVehicleDirection()"
        ]
    },
    "GetVehicleProperties": {
        "prefix": "ESX.Game.GetVehicleProperties",
        "body": [
            "ESX.Game.GetVehicleProperties(veh)"
        ]
    },
    "GetVehicles": {
        "prefix": "ESX.Game.GetVehicles",
        "body": [
            "ESX.Game.GetVehicles()"
        ]
    },
    "GetVehiclesInArea": {
        "prefix": "ESX.Game.GetVehiclesInArea",
        "body": [
            "ESX.Game.GetVehiclesInArea(pos, dist)"
        ]
    },
    "IsSpawnPointClear": {
        "prefix": "ESX.Game.IsSpawnPointClear",
        "body": [
            "ESX.Game.IsSpawnPointClear(pos, dist)"
        ]
    },
    "IsVehicleEmpty": {
        "prefix": "ESX.Game.IsVehicleEmpty",
        "body": [
            "ESX.Game.IsVehicleEmpty(veh)"
        ]
    },
    "SetVehicleProperties": {
        "prefix": "ESX.Game.SetVehicleProperties",
        "body": [
            "ESX.Game.SetVehicleProperties(veh, props) -- information in documentation: https://docs.esx-framework.org/legacy/Client/functions/game/setvehicleproperties"
        ]
    },
    "SpawnLocalObject": {
        "prefix": "ESX.Game.SpawnLocalObject",
        "body": [
            "ESX.Game.SpawnLocalObject(model/hash, pos, cb)"
        ]
    },
    "SpawnLocalVehicle": {
        "prefix": "ESX.Game.SpawnLocalVehicle",
        "body": [
            "ESX.Game.SpawnLocalVehicle(model/hash, pos, heading, cb)"
        ]
    },
    "SpawnObject": {
        "prefix": "ESX.Game.SpawnObject",
        "body": [
            "ESX.Game.SpawnObject(model/hash, pos, cb)"
        ]
    },
    "SpawnVehicle": {
        "prefix": "ESX.Game.SpawnVehicle",
        "body": [
            "ESX.Game.SpawnVehicle(model/hash, pos, heading, cb)"
        ]
    },
    "teleport": {
        "prefix": "ESX.Game.Teleport",
        "body": [
            "ESX.Game.Teleport(entity, pos, cb)"
        ]
    },
    "DrawText3d": {
        "prefix": "ESX.Game.Utils.DrawText3D",
        "body": [
            "ESX.Game.Utils.DrawText3D(pos, text, size, font)"
        ]
    },
    "ShowBreakingNews": {
        "prefix": "ESX.Scaleform.ShowBreakingNews",
        "body": [
            "ESX.Scaleform.ShowBreakingNews(title, msg, bottom, sec)"
        ]
    },
    "ShowFreemodeMessage": {
        "prefix": "ESX.Scaleform.ShowFreemodeMessage",
        "body": [
            "ESX.Scaleform.ShowFreemodeMessage(title, msg, sec)"
        ]
    },
    "ShowPopupWarning": {
        "prefix": "ESX.Scaleform.ShowPopupWarning",
        "body": [
            "ESX.Scaleform.ShowPopupWarning(title, msg, bottom, sec)"
        ]
    },
    "ShowTrafficMovie": {
        "prefix": "ESX.Scaleform.ShowTrafficMovie",
        "body": [
            "ESX.Scaleform.ShowTrafficMovie(sec)"
        ]
    },
    "RequestScaleformMovie": {
        "prefix": "ESX.Scaleform.RequestScaleformMovie",
        "body": [
            "ESX.Scaleform.RequestScaleformMovie(movie)"
        ]
    },
    "RequestAnimDict": {
        "prefix": "ESX.Streaming.RequestAnimDict",
        "body": [
            "ESX.Streaming.RequestAnimDict(dict, cb)"
        ]
    },
    "RequestAnimSet": {
        "prefix": "ESX.Steaming.RequestAnimSet",
        "body": [
            "ESX.Steaming.RequestAnimSet(set, cb)"
        ]
    },
    "RequestModel": {
        "prefix": "ESX.Streaming.RequestModel",
        "body": [
            "ESX.Streaming.RequestModel(model, cb)"
        ]
    },
    "RequestNamedPtfxAsset": {
        "prefix": "ESX.Streaming.RequestNamedPtfxAsset",
        "body": [
            "ESX.Streaming.RequestNamedPtfx(asset, cb)"
        ]
    },
    "RequestStreamedTextureDict": {
        "prefix": "ESX.Streaming.RequestStreamedTextureDict",
        "body": [
            "ESX.Streaming.RequestStreamedTextureDict(texture, cb)"
        ]
    },
    "RequestWeaponAsset": {
        "prefix": "ESX.Streaming.RequestWeaponAsset",
        "body": [
            "ESX.Streaming.RequestWeaponAsset(hash, cb)"
        ]
    },
    "ShowInventoryItemNotification": {
        "prefix": "ESX.UI.ShowInventoryItemNotification",
        "body": [
            "ESX.UI.ShowInventoryItemNotification(add, item, count)"
        ]
    },
    "RegisterElement": {
        "prefix": "ESX.UI.HUD.RegisterElement",
        "body": [
            "ESX.UI.HUD.RegisterElement(name, index, prio, html, data)"
        ]
    },
    "RemoveElement": {
        "prefix": "ESX.UI.HUD.RemoveElement",
        "body": [
            "ESX.UI.HUD.RemoveElement(name)"
        ]
    },
    "SetDisplay": {
        "prefix": "ESX.UI.HUD.SetDisplay",
        "body": [
            "ESX.UI.HUD.SetDisplay(opacity)"
        ]
    },
    "UpdateElement": {
        "prefix": "ESX.UI.HUD.UpdateElement",
        "body": [
            "ESX.UI.HUD.UpdateElement(name, data)"
        ]
    },
    "Close": {
        "prefix": "ESX.UI.Menu.Close",
        "body": [
            "ESX.UI.Menu.Close(type, namespace, name)"
        ]
    },
    "Closeall": {
        "prefix": "ESX.UI.Menu.Closeall",
        "body": [
            "ESX.UI.Menu.CloseAll()"
        ]
    },
    "GetOpened": {
        "prefix": "ESX.UI.Menu.GetOpened",
        "body": [
            "ESX.UI.Menu.GetOpened(type, namespace, name)"
        ]
    },
    "IsOpen": {
        "prefix": "ESX.UI.Menu.IsOpen",
        "body": [
            "ESX.UI.Menu.IsOpen(type, namespace, name)"
        ]
    },
    "Open": {
        "prefix": "ESX.UI.Menu.Open",
        "body": [
            "ESX.UI.Menu.Open(type, namespace, name, data, submit, cancel, change, close)"
        ]
    },
    "RegisterType": {
        "prefix": "ESX.UI.Menu.RegisterType",
        "body": [
            "ESX.UI.RegisterType(type, open, close)"
        ]
    },
    "onPlayerDeath": {
        "prefix": "ESX:onPlayerDeath",
        "body": [
            "AddEventHandler('esx:onPlayerDeath', function(data)",
            "   print('oops.. Player is death')",
            "end)"
        ]
    },
    "DumpTable": {
        "prefix": "ESX.DumpTable",
        "body": [
            "ESX.DumpTable(table)"
        ]
    },
    "GetConfig": {
        "prefix": "ESX.GetConfig",
        "body": [
            "ESX.GetConfig()"
        ]
    },
    "GetRandomString": {
        "prefix": "ESX.GetRandomString",
        "body": [
            "ESX.GetRandomString(length)"
        ]
    },
    "GetWeapon": {
        "prefix": "ESX.GetWeapon",
        "body": [
            "ESX.GetWeapon(weaponName)"
        ]
    },
    "GetWeaponComponent": {
        "prefix": "ESX.GetWeaponComponent",
        "body": [
            "ESX.GetWeaponComponent(weaponName, weaponComponent)"
        ]
    },
    "GetWeaponLabel": {
        "prefix": "ESX.GetWeaponLabel",
        "body": [
            "ESX.GetWeaponLabel(weaponName)"
        ]
    },
    "GetWeaponList": {
        "prefix": "ESX.GetWeaponList",
        "body": [
            "ESX.GetWeaponList"
        ]
    },
    "Math.GroupDigits": {
        "prefix": "ESX.Math.GroupDigits",
        "body": [
            "ESX.Math.GroupDigits(val)"
        ]
    },
    "Math.round": {
        "prefix": "ESX.Math.Round",
        "body": [
            "ESX.Math.Round(val, numDecimals)"
        ]
    },
    "Math.Trim": {
        "prefix": "ESX.Math.Trim",
        "body": [
            "ESX.Math.Trim(val)"
        ]
    }
}